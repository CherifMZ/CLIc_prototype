name: Build & test

on: [push,pull_request]

env:
  clespernato-kernels-git-tag: "d2348d964b1eaff60c60d7b3e18a59c2c8e3a84e"
  opencl-sdk-git-tag: "v2022.09.30"
  opencl-icd-loader-git-tag: "v2022.09.30"
  opencl-headers-git-tag: "v2022.09.30"
  opencl-clhpp-git-tag: "v2022.09.30 "

jobs:
  build:
    name: ${{ matrix.os }}-${{ matrix.cxx-compiler }}-${{ matrix.cmake-build-type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        name: [ubuntu, windows, macos]
        include:
          - name: ubuntu
            os: ubuntu-latest
            c-compiler: "gcc"
            cxx-compiler: "g++"
            cmake-build-type: "Release"
          - name: windows
            os: windows-latest
            c-compiler: "cl.exe"
            cxx-compiler: "cl.exe"
            cmake-build-type: "Release"
          - name: macos
            os: macos-latest
            c-compiler: "clang"
            cxx-compiler: "clang++"
            cmake-build-type: "Release"

    steps:
      
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install ninja
        shell: bash

      - name: Get specific version of CMake, Ninja
        uses: lukka/get-cmake@v3.21.2

      # - name: Download OpenCL-ICD-Loader
      #   run: |
      #     cd ..
      #     git clone https://github.com/KhronosGroup/OpenCL-ICD-Loader
      #     pushd OpenCL-ICD-Loader
      #     git checkout ${{ env.opencl-icd-loader-git-tag }}
      #     popd
      #     pushd OpenCL-ICD-Loader/inc
      #     git clone https://github.com/KhronosGroup/OpenCL-Headers
      #     pushd OpenCL-Headers
      #     git checkout ${{ env.opencl-headers-git-tag }}
      #     popd
      #     cp -r OpenCL-Headers/CL ./
      #     popd
      #   shell: bash

      - name: Install pocl
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo conda config --add channels conda-forge
          sudo conda config --set channel_priority strict
          sudo conda install -c conda-forge pocl
        shell: bash -l {0}


      - name: Install ocl-icd-loader
        if: matrix.os == 'windows-latest'
        run: |
          cd ..
          git clone --branch ${{ env.opencl-icd-loader-git-tag }} https://github.com/KhronosGroup/OpenCL-ICD-Loader
          git clone --branch ${{ env.opencl-headers-git-tag }} https://github.com/KhronosGroup/OpenCL-Headers
          cmake -D CMAKE_INSTALL_PREFIX="./OpenCL-Headers/install" -S "./OpenCL-Headers" -B "./OpenCL-Headers/build" 
          cmake --build "./OpenCL-Headers/build" --target install
          cmake -D CMAKE_PREFIX_PATH="./OpenCL-Headers/install" -D OPENCL_ICD_LOADER_HEADERS_DIR="./OpenCL-Headers/install/include" -S "./OpenCL-ICD-Loader" -B "./OpenCL-ICD-Loader/build" -A x64
          cmake --build "./OpenCL-ICD-Loader/build" --target install --config Release
        shell: bash -l {0}

      # - name: Build OpenCL-ICD-Loader
      #   run: |
      #     cd ..
      #     mkdir OpenCL-ICD-Loader-build
      #     cd OpenCL-ICD-Loader-build
      #     cmake -DCMAKE_C_COMPILER:FILEPATH="${{ matrix.c-compiler }}" -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_CXX_COMPILER="${{ matrix.cxx-compiler }}" -DCMAKE_BUILD_TYPE:STRING=${{ matrix.cmake-build-type }} -DBUILD_TESTING:BOOL=ON -DBUILD_TESTING:BOOL=ON -GNinja ../OpenCL-ICD-Loader
      #     sudo cmake --build . --target install

      # - name: test OCL-ICD-Loader
      #   run: |
      #     export OCL_ICD_VENDORS="$CONDA/etc/OpenCL/vendors/"
      #     cd ..
      #     cd OpenCL-ICD-Loader-build
      #     ctest --verbose
      
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: compile CLIc
        if: matrix.os != 'ubuntu-latest'
        run : |
          cmake -S "${{ github.workspace }}" -B "${{ runner.workspace }}/build" -DCMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }} -DBUILD_COVERAGE=ON -DBUILD_BENCHMARK=OFF
          cmake --build "${{ runner.workspace }}/build" --parallel 10
        shell: bash -l {0}

      - name: compile CLIc
        if: matrix.os == 'ubuntu-latest'
        run : |
          pwd
          cmake -S "${{ github.workspace }}" -B "${{ runner.workspace }}/build" -DCMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }} -DBUILD_COVERAGE=ON -DBUILD_BENCHMARK=OFF -DOpenCL_LIBRARY=$CONDA/lib/libOpenCL.so
          cmake --build "${{ runner.workspace }}/build" --parallel 10
        shell: bash -l {0}

      - name: run CLIc core test
        run: |
          cd "${{ runner.workspace }}/build"
          ctest -L CORE
        shell: bash -l {0}

      
      



