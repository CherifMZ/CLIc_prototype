name: CI-Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    
    name: ${{ matrix.os }}-${{ matrix.cxx }}-${{ matrix.buildtype }}-and-test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        name: [ubuntu-gcc, ubuntu-clang, macos-clang, windows-msvc]
        buildtype: [Debug, Release]
        include:
          - name: windows-msvc
            os: windows-latest
            cxx: cl.exe
            cc: cl.exe
            triplet: x64-windows
            packages: >
              opencl 
          - name: ubuntu-gcc
            os: ubuntu-latest
            cxx: g++
            cc: gcc
            triplet: x64-linux
            packages: >
              opencl-headers opencl-headers ocl-icd-opencl-dev lcov gcovr
          - name: ubuntu-clang
            os: ubuntu-latest
            cxx: clang++
            cc: clang
            triplet: x64-linux
            packages: >
              opencl-headers ocl-icd-opencl-dev lcov gcovr
          - name: macos-clang
            os: macos-latest
            cxx: clang++
            cc: clang
            triplet: x64-osx
            packages: >
              lcov gcovr 

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true 
      
      - if: startsWith(matrix.os, 'windows')
        name: Install packages [windows]
        run: ${{ runner.workspace }}/vcpkg/vcpkg install ${{ matrix.packages }}:${{ matrix.triplet }}
          
      - if: startsWith(matrix.os, 'macos')
        name: Install packages [macos]
        run: brew update && brew install ${{ matrix.packages }}

      - if: startsWith(matrix.os, 'ubuntu')
        name: Install packages [linux]
        run:  sudo apt-get update && sudo apt-get install ${{ matrix.packages }}

      # - name: Run CMake with Ninja
      #   uses: lukka/run-cmake@main
      #   id: runcmake
      #   with:
      #     buildDirectory: ${{ runner.workspace }}/build
      #     cmakeBuildType: ${{ matrix.buildtype }}
      #     cmakeGenerator: 'Ninja'  
      #     cmakeListsOrSettingsJson: 'CMakeListsTxtBasic'
      #     cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
      #     useVcpkgToolchainFile: true
      #     buildWithCMakeArgs: '-- -v'

      - name: Configure
        shell: bash
        run: |
          cmake -S ${{ github.workspace }} -B ${{ runner.workspace }}/build -DCMAKE_BUILD_TYPE=${{ matrix.buildtype }}

      - name: Build
        shell: bash
        run: |
          cd ${{ runner.workspace }}/build && make

      - if: startsWith(matrix.os, 'macos') && startsWith(matrix.buildtype, 'Debug')
        name: Run Coverage analysis
        shell: bash
        run: |
          cmake -S ${{ github.workspace }} -B ${{ runner.workspace }}/build -DCMAKE_BUILD_TYPE=${{ matrix.buildtype }} -DBUILD_CODE_COVERAGE=ON
          cd ${{ runner.workspace }}/build && make coverage_xml

      - if: startsWith(matrix.os, 'macos') && startsWith(matrix.buildtype, 'Debug')
        name: Upload coverage
        uses: codecov/codecov-action@v1
        with:
          # token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          files: ${{ runner.workspace }}/build/coverage_xml.xml
          fail_ci_if_error: true # optional (default = false)

