#!/usr/bin/python

import sys, os, glob

def stringify(in_file, out_folder, prefix="cle_"):    
    kernel_template = """
// This file is auto generated at build time. Do not edit manually.

#ifndef OCL_{kernel_upname}_H
#define OCL_{kernel_upname}_H

namespace kernel {

constexpr const char* {kernel_loname} =
{kernel_source};

} // end of namespace kernel

#endif // OCL_{kernel_upname}_H
"""

    with open(in_file, 'r') as f:
        kernel_source = f.read()

    length = len(kernel_source) +10
    upname = in_file.split(os.sep)[-1].split(".")[0].upper()
    loname = upname.lower()

    # compose output file name and path using os.path.join
    out_file = os.path.join(out_folder, prefix + loname + ".h")
    split_kernel_source = kernel_source.split("\n")

    lines = []
    for i, line in enumerate(split_kernel_source):
            if i == len(split_kernel_source) - 1:
                lines.append(f"\t\"{line}\";\n")
            else:
                lines.append(f"\t\"{line}\\n\"\n")
    kernel_source = "".join(lines)

    with open(out_file, 'w') as f:
         f.write(kernel_template.format(kernel_upname=upname, kernel_loname=loname, kernel_source=kernel_source))

    # with open(out_file, 'w') as f:
    #     f.write("// This file is generated by the build script. Do not edit manually.\n")
    #     f.write(f"#ifndef OCL_{upname}_H\n")
    #     f.write(f"#define OCL_{upname}_H\n\n")
    #     f.write("namespace oclKernel {\n")
    #     f.write("\n")
    #     # f.write(f"\tconstexpr const char* {loname} = R\"({kernel_source})\";\n")
    #     f.write(f"\tconstexpr const char* {loname} =\n")
    #     for i, line in enumerate(split_kernel_source):
    #         if i == len(split_kernel_source) - 1:
    #             f.write(f"\t\t\"{line}\";\n")
    #         else:
    #             f.write(f"\t\t\"{line}\\n\"\n")  # Add line break after each line
    #     f.write("\n}\n\n // end of namespace oclKernel\n")
    #     f.write(f"#endif // OCL_{upname}_H\n")

# check output folder existance
if not os.path.exists(sys.argv[2]):
    os.makedirs(sys.argv[2])
    
if os.path.isdir(sys.argv[1]):
    file_list = glob.glob( os.path.join(sys.argv[1],'**/*.cl'), recursive=True)
    for file in file_list:
        filename = os.path.basename(file)
        name, ext = os.path.splitext(filename)
        stringify(file, sys.argv[2])
