#!/usr/bin/python

import sys, os, glob

def stringify(in_file, out_folder, prefix="cle_"):    
    with open(in_file, 'r') as f:
        kernel_source = f.read()

    length = len(kernel_source) +10
    upname = in_file.split(os.sep)[-1].split(".")[0].upper()
    loname = upname.lower()

    # compose output file name and path using os.path.join
    out_file = os.path.join(out_folder, prefix + loname + ".h")

    with open(out_file, 'w') as f:
        f.write("// This file is generated by the build script. Do not edit manually.\n")
        f.write(f"#ifndef OCL_{upname}_H\n")
        f.write(f"#define OCL_{upname}_H\n\n")
        f.write("namespace oclKernel {\n")
        f.write("     ")
        if loname == "preamble":
            f.write("\n")
            f.write(f" inline const std::string& {loname}()\n")
            f.write("    {\n")
            f.write(f"    static std::string str;\n")
            f.write(f"    str.reserve({length});\n")
            f.write(f"    str = R\"({kernel_source})\";\n")
            f.write("    return str;\n")
            f.write("    }\n")
        else:
            f.write(f"    constexpr const char* {loname} = R\"({kernel_source})\";\n")
        f.write("}\n\n")
        f.write(f"#endif // OCL_{upname}_H\n")

# check output folder existance
if not os.path.exists(sys.argv[2]):
    os.makedirs(sys.argv[2])
    
if os.path.isdir(sys.argv[1]):
    file_list = glob.glob( os.path.join(sys.argv[1],'**/*.cl'), recursive=True)
    for file in file_list:
        filename = os.path.basename(file)
        name, ext = os.path.splitext(filename)
        stringify(file, sys.argv[2])
